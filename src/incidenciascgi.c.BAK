
#include <sys/types.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>

#include <memory.h>
#include <errno.h>

#include "cgl.h"
#include "cgi.h"
#include "logersaihbd.h"

BDCONF BdConf;
IN in;
short DEBUG=DEPURAR;

int
main(int argc, char **argv)
{

	int	ParNumAux,i,j,numsen,numincid;
	long	segjulini,segjulact;
	struct	tm *newtime;
	FILE	*fh;
	char	path[80],LisPer[6][5],*auxch,EtiAux[12];

	strcpy(LisPer[0],"10");
	strcpy(LisPer[1],"25");
	strcpy(LisPer[2],"50");
	strcpy(LisPer[3],"100");
	strcpy(LisPer[4],"1000");
	strcpy(LisPer[5],"2000");

	if (cgl_initenv() == -1) {
		cgl_perror(stderr, "digitalescgi");
		exit(1);
	}


	if (strcmp(cgl_Env->request_method, "GET") == 0) {


		cgl_html_begin("Supervision Incidencias");


		printf("<br><br><center>");

		cgl_put_heading(2, "Supervision Incidencias");

		printf("<br><br></center>");

		if (cgl_initformdata() == -1) {
			cgl_perror(stderr, "incidenciascgi");
			exit(1);
		}


		printf("<TABLE class=\"datos\">");
		printf("<TR><TD >");

/*************** Formulario numero incidencias a solicitar*********************/
		printf("<form action=incidencias.sh method=POST>\n");
		printf("<h4>Numero Incidencias:</h4>");
		printf("<select name=num valign=top size=1>\n");
		for (j=0;j<6;j++){
			printf("    <option>%s\n",LisPer[j]);
		}
		printf("  </select>\n");
		printf("<p></td>\n");

		printf("<TD >");
		printf("<h4>Numero Se&ntilde;al:</h4>");
		printf("<select name=sen valign=top size=1>\n");
		printf("    <option>Todas\n");
		for (j=1;j<32;j++){
			printf("    <option>Sen %d\n",j);
		}
		printf("  </select>\n");
		printf("<p></td>\n");

		printf("<TD >");
		printf("<input type=hidden name=\"flag\" value=\"noreset\">\n");
		printf("<br><input type=submit value=\"Mostrar Incidencias\">\n");
		printf("<p></td>\n");

		printf("</tr></TABLE></form>");

		cgl_html_end();


	} else {

		//cgl_html_header();

		cgl_html_begin("Supervision Incidencias");

		printf("<br><br><center>");

		cgl_put_heading(2, "Supervision Incidencias");

		printf("</center>");

		if (cgl_initformdata() == -1) {
			cgl_perror(stderr, "incidenciascgi");
			exit(1);
		}




		// para Axis por ahora es necesario fijar la variable de entorno a mano
		// en la version 0.94 de Boa se puede establecer en boa.conf
		if(CompilarAxis){
			if(setenv("SAIHBD",SAIHBD_PATH,1) !=0){
				printf(stderr,"\n\tReadLogerBd:No es posible SET Variable Entorno SAIHBD");exit(1);}
		}
		if(DEBUG){	printf("debugCGI %s\n<BR>",(char *)getenv("SAIHBD"));fflush(stdout);}
	
		if( (char *)getenv("SAIHBD") == NULL){
			printf(stderr,"\n\tReadLogerBd:Variable Entorno SAIHBD NO SET");fflush(stdout);exit(1);}


		//si se pide resetear el flag incidencias:
		if(DEBUG){printf("<br>\ndebugCGI %s\n<BR>",cgl_getvalue("flag"));fflush(stdout);}
		if(strcmp(cgl_getvalue("flag"),"reset")==0){
			if(i=ReadLogerIn(in)!=0){			// Leer Objeto IN de Incidencias
				printf("\n\tReadLogerIn:Error=%d",i);
				fflush(stdout);
				exit(1);}
		if(DEBUG){printf("<br>\ndebugCGI %hd\n<BR>",in.FlagIn);fflush(stdout);}
			in.FlagIn=0;
			if(i=WriteLogerIn(in)!=0){		//Escribir Objeto B.D  BDCONF 
				printf("\n\tReadLogerBd:Error=%d",i);
				fflush(stdout);
				exit(1);}
		if(DEBUG){printf("<br>\ndebugCGI %hd\n<BR>",in.FlagIn);fflush(stdout);}
		cgl_put_heading(3, "..............................Reseteado Flag Recuperacion Incidencias");
		} else {

		if(DEBUG){printf("<br>\ndebugCGI %s\n<BR>",cgl_getvalue("flag"));fflush(stdout);}
		
		//parsear numero senial
		sscanf(cgl_getvalue("num"),"%d",&numincid);
		sscanf(cgl_getvalue("sen"),"%3s %d",&auxch,&numsen);
		if(DEBUG){printf("<br>\ndebugCGI %d,%d\n<BR>",numincid,numsen);fflush(stdout);}

		//lectura incidencias
		segjulact=time(NULL);
		newtime=localtime(&segjulact);
		auxch=asctime(newtime);
		//Para apl axis-sac solo se leen ultimos 10 dias
		//para axis-loger se amplia a 350
		segjulini = 350 * SEGPDIA;
		segjulact = segjulact - segjulini;

		if(DEBUG){printf("<br>\ndebugCGI %d\n<BR>",segjulact);fflush(stdout);}

		if(i=ReadLogerIn(in)!=0){				// Leer Objeto IN de Incidencias
			printf("\n\tReadLogerIn:Error=%d",i);
			fflush(stdout);
			exit(1);}
		if(i=ReadLogerBd(&BdConf)!=0){			//Leer Objeto B.D  BDCONF 
			printf("\n\tReadLogerBd:Error=%d",i);
			exit(1);}
		

		printf("\n<table class=\"datos\">");
		printf("\n<tr class=\"cabecera\"><td WIDTH=\"175px\" align=\"center\"><b>Fecha</b></td><td WIDTH=\"75px\" align=\"center\"><b>Incid Sac</b></td><td WIDTH=\"50px\" align=\"center\"><b>Se&ntilde;al</b></td><td WIDTH=\"100px\" align=\"center\"><b>Tag</b></td><td WIDTH=\"200px\" align=\"center\"><b>Desc</b></td><td WIDTH=\"50px\" align=\"center\"><b>Estado</b></td><td WIDTH=\"150px\" align=\"center\"><b>Etiqueta</b></td></tr>");

		j=1;
		int k=0;

		//lectura incidencias desde la mas antigua
		//for(i=0;i<VALMAXIND;i++){

		//lectura incidencias desde la mas reciente
		for(i=in.IndUltIn;i>=in.IndUltIn-VALMAXIND;i--){
			k++;
			if(k>VALMAXIND) break;		//en caso de que no haya ninguna incidencia de la seÃ±al
			if(j>numincid) break;		//no se devuelven mas incidencias de las solicitadas
			if(i<=0) i=3999;
			if( in.SegJulIn[i] < segjulact ) continue;
			unsigned long segjulin = in.SegJulIn[i];
			newtime=localtime(&segjulin);
			auxch=asctime(newtime);
			if(strcmp(cgl_getvalue("sen"),"Todas")!=0){
			if(in.NumSen[i] != numsen) continue;
			}
			if(DEBUG){printf("\n\t%d-INCID SAC:[%d] NumSen=%hd Estado=%hd SegJulIn[%d]=%ld FECHA:%s<br>",j,i,in.NumSen[i],in.Estado[i],i,in.SegJulIn[i],auxch);}

			//segun estado se imprime la etiqueta correspondiente
			if(in.Estado[i]==0){strcpy(EtiAux,BdConf.digconf.etiqueta0[in.NumSen[i]-1]);}
			else {strcpy(EtiAux,BdConf.digconf.etiqueta1[in.NumSen[i]-1]);}

			printf("\n<trclass=\"dato\"> <td align=\"center\">%s</td> <td align=\"center\">%d</td> <td align=\"center\">%d</td><td align=\"center\">%s</td> <td align=\"center\">%s</td> <td align=\"center\">%hd</td> <td align=\"center\" > <font color=\"#FF0000\">%s</font></td></tr>",auxch,i,in.NumSen[i],BdConf.digconf.tag[in.NumSen[i]-1],BdConf.digconf.desc[in.NumSen[i]-1],in.Estado[i],EtiAux);
			j++;
		}
	
		printf("</table>");
		printf("\n\t<br>IndAct=%hd (%0x) IndUltIn=%hd (%0x) NumInAlm=%hd (%0x) ValMaxInd=%hd (%0x)",
		in.IndAct,in.IndAct,in.IndUltIn,in.IndUltIn,in.NumInAlm,in.NumInAlm,in.ValMaxInd,in.ValMaxInd);

		}

		fflush(stdout);

		cgl_freeformdata();

		cgl_html_end();

/*********************************************************************************/

	}

	return 0;
}

/* END */
